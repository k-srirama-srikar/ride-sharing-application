# Generated by Django 5.2 on 2025-04-24 20:22

from django.db import migrations, models




# SQL to create the trigger function and trigger
TRIGGER2_SQL = """
CREATE OR REPLACE FUNCTION update_rider_stats_on_ride()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE core_rider
    SET 
        ride_count = ride_count + 1,
        last_ride_at = CURRENT_TIMESTAMP
    WHERE id = NEW.id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_rider_stats
AFTER INSERT ON core_ride
FOR EACH ROW
EXECUTE PROCEDURE update_rider_stats_on_ride();
"""

# SQL to drop the trigger and function (used for reversing the migration)
REVERSE_TRIGGER_SQL = """
DROP FUNCTION IF EXISTS update_rider_stats_on_ride() CASCADE;
DROP TRIGGER IF EXISTS trg_update_rider_stats ON core_ride CASCADE;
"""






class Migration(migrations.Migration):

    dependencies = [
        ("core", "0004_driverlocation_core_driver_locatio_802aba_gist"),
    ]

    operations = [
        

        migrations.RunSQL(TRIGGER2_SQL, REVERSE_TRIGGER_SQL),


        migrations.RunSQL(
            sql='''
            CREATE OR REPLACE FUNCTION validate_pooling_seats()
            RETURNS TRIGGER AS $$
            BEGIN
                IF NEW.available_seats > NEW.total_seats THEN
                    RAISE EXCEPTION 'Available seats cannot exceed total seats';
                END IF;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER trg_validate_seats
            BEFORE INSERT OR UPDATE ON core_ridepooling
            FOR EACH ROW
            EXECUTE FUNCTION validate_pooling_seats();
            ''',
            reverse_sql="""
            DROP TRIGGER IF EXISTS trg_validate_seats ON core_ridepooling CASCADE;
            DROP FUNCTION IF EXISTS validate_pooling_seats() CASCADE;
            """
        ),

        migrations.RunSQL(
            sql='''
            CREATE TABLE IF NOT EXISTS driver_flags (
                flag_id SERIAL PRIMARY KEY,
                driver_id INT REFERENCES core_driver(id),
                message TEXT,
                flagged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE OR REPLACE FUNCTION flag_inactive_driver()
            RETURNS TRIGGER AS $$
            BEGIN
                IF NEW.updated_at < NOW() - INTERVAL '1 hour' THEN
                    INSERT INTO driver_flags(driver_id, message)
                    VALUES (NEW.driver_id, 'Driver inactive for over 1 hour');
                END IF;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER trg_flag_inactive_driver
            AFTER UPDATE ON core_driverlocation
            FOR EACH ROW
            EXECUTE FUNCTION flag_inactive_driver();
            ''',
            reverse_sql="""
            DROP TRIGGER IF EXISTS trg_flag_inactive_driver ON core_driverlocation CASCADE;
            DROP FUNCTION IF EXISTS flag_inactive_driver() CASCADE;
            """
        ),

        # migrations.RunSQL(
        #     sql="""
        #     CREATE OR REPLACE FUNCTION update_driver_stats()
        #     RETURNS TRIGGER AS $$
        #     BEGIN
        #         -- Only act when a ride is marked completed
        #         IF NEW.status = 'completed' AND OLD.status <> 'completed' THEN
        #             UPDATE core_driver
        #             SET completed_ride_count = completed_ride_count + 1,
        #                 last_completed_ride_at = CURRENT_TIMESTAMP
        #             WHERE id = NEW.id;
        #         END IF;
        #         RETURN NEW;
        #     END;
        #     $$ LANGUAGE plpgsql;
        #     """,
        #     reverse_sql="""
        #     DROP FUNCTION IF EXISTS update_driver_stats() CASCADE;
        #     """            
        # ),
        # migrations.RunSQL(
        #     sql="""
        #     DROP TRIGGER IF EXISTS trg_update_driver_stats ON rides;

        #     CREATE TRIGGER trg_update_driver_stats
        #     AFTER UPDATE ON core_ride
        #     FOR EACH ROW
        #     EXECUTE FUNCTION update_driver_stats();
        #     """,
        #     reverse_sql='''
        #     DROP TRIGGER IF EXISTS trg_flag_inactive_driver ON core_driverlocation CASCADE;
        #     '''
        # )
    ]
